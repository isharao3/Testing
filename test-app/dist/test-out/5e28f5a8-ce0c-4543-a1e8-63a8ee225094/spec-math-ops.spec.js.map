{
  "version": 3,
  "sources": ["src/app/math-ops.ts", "src/app/math-ops.spec.ts"],
  "sourcesContent": ["export class MathOps {\r\n  divide(num1: number, num2: number) {\r\n    if (num2 == 0)\r\n    {\r\n      throw new Error(\"Divide by zero error\");\r\n    }\r\n    return num1/num2;\r\n  }\r\n  cube(num2: number) {\r\n    return num2*num2*num2;\r\n  }\r\n  square(num1: number) {\r\n    return num1*num1;\r\n  }\r\n  add(num1: number, num2: number): number {\r\n    return num1 + num2; \r\n    \r\n  }\r\n}\r\n", "import { MathOps } from \"./math-ops\";\r\n\r\ndescribe('Sample Test Suite',()=>{\r\n  var num=0;\r\n  beforeEach(()=>{\r\n    num=1\r\n  })\r\n  it('Simple Test increment',()=>{\r\n    // let num=1;\r\n    ++num;\r\n    expect(num).toBe(2);\r\n  })\r\n\r\n  it('Simple Decrement',()=>{\r\n    --num;\r\n    expect(num).toBe(0);\r\n  })\r\n\r\n  it('Simple String Test',()=>{\r\n    let str=\"Hello Angular, we are testing ng classes using jasmine\"\r\n\r\n    expect(str).toContain(\"Angular\");\r\n    expect(str).toContain(\"jasmine\");\r\n  })\r\n})\r\n\r\ndescribe('calculator Tests', () => {\r\n  var calculator: MathOps;\r\n  var num1=0;\r\n  var num2=0;\r\n  beforeAll(()=>{\r\n    calculator=new MathOps();\r\n  });\r\n  beforeEach(() => {\r\n    num1=100;\r\n    num2=200;\r\n  });\r\n  it('Adding two positive integers', ()=>{\r\n    let result=calculator.add(num1, num2);\r\n    expect(num1).toBeGreaterThan(0);\r\n    expect(num2).toBeGreaterThan(0);\r\n    expect(result).toBe(300);\r\n  })\r\n  \r\n  it('Square of a positive integers',() =>{\r\n    let result =calculator.square(num1);\r\n    expect(num1).toBeGreaterThan(0);\r\n    expect(result).toBe(10000);\r\n\r\n  })\r\n\r\n  it('Calculates cube of a positive integer',()=>{\r\n    let result= calculator.cube(num2);\r\n    expect(num2).toBeGreaterThan(0);\r\n    expect(result).toBe(8000000)\r\n  })\r\n\r\n  it('verify that divide by zero throws an error', ()=>{\r\n    // calculator.divide(num1,0);\r\n\r\n    expect(()=> calculator.divide(num1,0)).toThrowError(\"Divide by zero error\");\r\n  })\r\n})"],
  "mappings": ";;;AAAM,IAAO,UAAP,MAAc;EAClB,OAAO,MAAc,MAAY;AAC/B,QAAI,QAAQ,GACZ;AACE,YAAM,IAAI,MAAM,sBAAsB;IACxC;AACA,WAAO,OAAK;EACd;EACA,KAAK,MAAY;AACf,WAAO,OAAK,OAAK;EACnB;EACA,OAAO,MAAY;AACjB,WAAO,OAAK;EACd;EACA,IAAI,MAAc,MAAY;AAC5B,WAAO,OAAO;EAEhB;;;;ACfF,SAAS,qBAAoB,MAAI;AAC/B,MAAI,MAAI;AACR,aAAW,MAAI;AACb,UAAI;EACN,CAAC;AACD,KAAG,yBAAwB,MAAI;AAE7B,MAAE;AACF,WAAO,GAAG,EAAE,KAAK,CAAC;EACpB,CAAC;AAED,KAAG,oBAAmB,MAAI;AACxB,MAAE;AACF,WAAO,GAAG,EAAE,KAAK,CAAC;EACpB,CAAC;AAED,KAAG,sBAAqB,MAAI;AAC1B,QAAI,MAAI;AAER,WAAO,GAAG,EAAE,UAAU,SAAS;AAC/B,WAAO,GAAG,EAAE,UAAU,SAAS;EACjC,CAAC;AACH,CAAC;AAED,SAAS,oBAAoB,MAAK;AAChC,MAAI;AACJ,MAAI,OAAK;AACT,MAAI,OAAK;AACT,YAAU,MAAI;AACZ,iBAAW,IAAI,QAAO;EACxB,CAAC;AACD,aAAW,MAAK;AACd,WAAK;AACL,WAAK;EACP,CAAC;AACD,KAAG,gCAAgC,MAAI;AACrC,QAAI,SAAO,WAAW,IAAI,MAAM,IAAI;AACpC,WAAO,IAAI,EAAE,gBAAgB,CAAC;AAC9B,WAAO,IAAI,EAAE,gBAAgB,CAAC;AAC9B,WAAO,MAAM,EAAE,KAAK,GAAG;EACzB,CAAC;AAED,KAAG,iCAAgC,MAAK;AACtC,QAAI,SAAQ,WAAW,OAAO,IAAI;AAClC,WAAO,IAAI,EAAE,gBAAgB,CAAC;AAC9B,WAAO,MAAM,EAAE,KAAK,GAAK;EAE3B,CAAC;AAED,KAAG,yCAAwC,MAAI;AAC7C,QAAI,SAAQ,WAAW,KAAK,IAAI;AAChC,WAAO,IAAI,EAAE,gBAAgB,CAAC;AAC9B,WAAO,MAAM,EAAE,KAAK,GAAO;EAC7B,CAAC;AAED,KAAG,8CAA8C,MAAI;AAGnD,WAAO,MAAK,WAAW,OAAO,MAAK,CAAC,CAAC,EAAE,aAAa,sBAAsB;EAC5E,CAAC;AACH,CAAC;",
  "names": []
}
